
===========================
How to Use 0-add_integer.py
===========================


This tests directory is showing us how to go about the  integer addition function ``add_integer(a, b=98)``


	How to
	=====


	``add_integer(...)``` this will add it all together,
	Making use of the ``+`` operator.


	::


	    >>> add_integer = __import__('0-add_integer').add_integer
	    >>> add_integer(2, 3)
	    5


	::


	    >>> add_integer(2, -3)
	    -1


	Also as well


	::


	    >>> add_integer(2.0, 3.0)
	    5


	Add integar


	::


	    >>> add_integer(2.9, 0.2)
	    2


	::


	    >>> add_integer(-2.9, -0.2)
	    -2


	Some addition here


	::


	    >>> add_integer(2.3, -3)
	    -1


	Another one


	::


	    >>> add_integer(2)
	    100


	Non-Numbers
	===========






	::


	    >>> add_integer("hello", 3)
	    Traceback (most recent call last):
	    TypeError: a must be an integer


	::


	    >>> add_integer(2, "hello")
	    Traceback (most recent call last):
	    TypeError: b is an integer


	::


	    >>> add_integer(None)
	    Traceback (most recent call last):
	    TypeError: a must be an integer


	::


	    >>> add_integer(2.3, None)
	    Traceback (most recent call last):
	    TypeError: b must be an integer


	An integar



	::


	    >>> add_integer("hello", "there")
	    Traceback (most recent call last):
	    TypeError: a must be an integer


	The function will fail if infinity is provided.


	::


	    >>> add_integer(float('inf'))
	    Traceback (most recent call last):
	    OverflowError: cannot convert float infinity to integer



	::


	    >>> add_integer(2, float('inf'))
	    Traceback (most recent call last):
	    OverflowError: cannot convert float infinity to integer


	Here too


	::


	    >>> add_integer(float('nan'))
	    Traceback (most recent call last):
	    ValueError: cannot convert float NaN to integer


	::


	    >>> add_integer(2, float('nan'))
	    Traceback (most recent call last):
	    ValueError: cannot convert float NaN to integer
